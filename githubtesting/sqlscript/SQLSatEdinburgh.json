{
	"name": "SQLSatEdinburgh",
	"properties": {
		"description": "Scripts for SQL Sat Edinburgh",
		"folder": {
			"name": "SQLSat"
		},
		"content": {
			"query": "-- type your sql script here, we now have intellisense\n---- remember to connect with AAD authenication\n-- connect  to the right database!!!!!!! \n\n-- check status of metadata.\nexec sys.sp_metadata_sync_connectors_status\n\n/*\nDemo: \n1) Use query on demand: to query file system\n2) Use query on demand: to query file system and select 1 column\n3) Create a view,  over the file system\n4) Do some fancy stuff on SQL on Demand via view\n5) Query a table in HIVE (Spark) \n6) Join view something in a file with a table in Spark\n7) Create external table from query on demand \n8) Query external table\n10) Using filename and filepath */\n\n\n--1) Use query on demand: to query file system\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://csatraining.dfs.core.windows.net/csafs/loading/Weather/Parquet/QID16582_20200130_160110_0.parq',\n        FORMAT='PARQUET'\n    ) AS [r];\n\n--2) Use query on demand: to query file system and select 1 column\n\nSELECT top 10\n    dateid\nFROM\n    OPENROWSET(\n        BULK 'https://csatraining.dfs.core.windows.net/csafs/loading/Weather/Parquet/QID16582_20200130_160110_0.parq',\n        FORMAT='PARQUET'\n    ) AS [r];\n\n-- 3) Create a view,  over the file system\nDROP VIEW IF EXISTS weather_view\nGO\n\nCREATE view weather_view  as\nSELECT *\nFROM\n    OPENROWSET(\n        BULK 'https://csatraining.dfs.core.windows.net/csafs/loading/Weather/Parquet/QID16582_20200130_160110_0.parq',\n        FORMAT='PARQUET'\n    ) AS [r];\n\n-- 4) Do some fancy stuff on SQL on Demand via view\nselect Max([PrecipitationInches]) max_PrecipitationInches, \nmin([PrecipitationInches]) min_PrecipitationInches, \navg([PrecipitationInches]) avg_PrecipitationInches, [GeographyID] from weather_view group by\n[GeographyID] \n\nset ANSI_PADDING ON;\n set ANSI_WARNINGS ON;\n -- query table in spark!!!\n\n-- 5) Query a table in HIVE (Spark) \n\nSELECT TOP (1000) [city]\n,[country]\n,[county]\n,[geographyid]\n,[state]\n,[zipcode]\n,[zipcodebkey]\n FROM [default].[dbo].[geography]\n\n\n-- 6) Join view something in a file with a table in Spark\n\nselect \n\tMax(w.[PrecipitationInches]) max_PrecipitationInches, \n\tmin(w.[PrecipitationInches]) min_PrecipitationInches, \n\tavg(w.[PrecipitationInches]) avg_PrecipitationInches, \n\tg.[country]\nfrom weather_view w\n\tjoin \n\t[default].[dbo].[geography] g \n\ton w.GeographyID = g.GeographyID\ngroup by\n\tg.[country]\n\n--7) Export query to filesystem\n\n\nCREATE EXTERNAL FILE FORMAT [Parquet] WITH (FORMAT_TYPE = PARQUET)\n\n\nCREATE EXTERNAL DATA SOURCE adls\nWITH \n(\nLOCATION = N'https://csatraining.dfs.core.windows.net/csafs/'\n)\nGO\n\n\nCREATE EXTERNAL TABLE weather_by_geography\nWITH (   \n\tLOCATION = 'sqlondemand/',\n\tDATA_SOURCE = adls,  \n\tFILE_FORMAT = [Parquet]\n)  \nAS \nselect \n\t   w.[DateID]\n      ,w.[GeographyID]\n      ,w.[PrecipitationInches]\n      ,w.[AvgTemperatureFahrenheit]\n\t  ,g.[ZipCodeBKey]\n      ,g.[County]\n      ,g.[City]\n      ,g.[State]\n      ,g.[Country]\n      ,g.[ZipCode]\nfrom weather_view w\n\tjoin \n\t[default].[dbo].[geography] g \n\ton w.GeographyID = g.GeographyID\n\nGO\n\n-- you can query created external table\nSELECT * FROM weather_by_geography\n\n\n-- 10) using filename and filepath.\n\n\tSELECT\n     r.filename() AS [filename]\n     ,r.filepath() AS [filepath]\n     ,r.filepath(1) as [filepath1]\n\t ,r.filepath(2) as [filepath2]\n\t,COUNT_BIG(*) AS [rows]\nFROM\n    OPENROWSET(\n        BULK 'https://csatraining.dfs.core.windows.net/csafs/loading/FactInternetSales/parquet2/*-*-*-*-*-*-*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS [r]\n\twhere r.filepath(2) = '92a131c9'\n    group by r.filename(), r.filepath(), r.filepath(1),r.filepath(2);\n\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"name": "master",
				"type": "SqlOnDemand"
			}
		},
		"type": "SqlQuery"
	}
}