{
	"name": "AzureMLNotebook",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1
		},
		"metadata": {
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5d0ea299-7dff-4878-a18e-10bfc0df8d8e/resourceGroups/mpm/providers/Microsoft.Synapse/workspaces/mpmsynapseworkspace/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://mpmsynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## Connect to workspace\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.core import Workspace\n",
					"\n",
					"subscription_id = '5d0ea299-7dff-4878-a18e-10bfc0df8d8e'\n",
					"resource_group  = 'adf'\n",
					"workspace_name  = 'azurelmws'\n",
					"\n",
					"\n",
					"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)\n",
					"ws.write_config()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Create Experiment\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.core import Experiment\n",
					"experiment = Experiment(workspace=ws, name=\"diabetes-experiment\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Load data and prepare for training\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.opendatasets import Diabetes\n",
					"from sklearn.model_selection import train_test_split\n",
					"\n",
					"x_df = Diabetes.get_tabular_dataset().to_pandas_dataframe().dropna()\n",
					"y_df = x_df.pop(\"Y\")\n",
					"\n",
					"X_train, X_test, y_train, y_test = train_test_split(x_df, y_df, test_size=0.2, random_state=66)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Display data\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"display(x_df)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Run Scikit-Learn Expirment\n",
					"Using Ridge Regression with different parameters to find best model.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from sklearn.linear_model import Ridge\n",
					"from sklearn.metrics import mean_squared_error\n",
					"from sklearn.externals import joblib\n",
					"import math\n",
					"\n",
					"alphas = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n",
					"\n",
					"for alpha in alphas:\n",
					"    run = experiment.start_logging()\n",
					"    run.log(\"alpha_value\", alpha)\n",
					"\n",
					"    model = Ridge(alpha=alpha)\n",
					"    model.fit(X=X_train, y=y_train)\n",
					"    y_pred = model.predict(X=X_test)\n",
					"    rmse = math.sqrt(mean_squared_error(y_true=y_test, y_pred=y_pred))\n",
					"    run.log(\"rmse\", rmse)\n",
					"\n",
					"    model_name = \"model_alpha_\" + str(alpha) + \".pkl\"\n",
					"    filename = \"outputs/\" + model_name\n",
					"\n",
					"    joblib.dump(value=model, filename=filename)\n",
					"    run.upload_file(name=model_name, path_or_stream=filename)\n",
					"    run.complete()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"from sklearn.linear_model import Ridge\n",
					"from sklearn.metrics import mean_squared_error\n",
					"from sklearn.externals import joblib\n",
					"import math\n",
					"\n",
					"alphas = [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1]\n",
					"\n",
					"for alpha in alphas:\n",
					"    run = experiment.start_logging()\n",
					"    run.log(\"alpha_value\", alpha)\n",
					"\n",
					"    model = Ridge(alpha=alpha)\n",
					"    model.fit(X=X_train, y=y_train)\n",
					"    y_pred = model.predict(X=X_test)\n",
					"    rmse = math.sqrt(mean_squared_error(y_true=y_test, y_pred=y_pred))\n",
					"    run.log(\"rmse\", rmse)\n",
					"\n",
					"    model_name = \"model_alpha_\" + str(alpha) + \".pkl\"\n",
					"    filename = \"outputs/\" + model_name\n",
					"\n",
					"    joblib.dump(value=model, filename=filename)\n",
					"    run.upload_file(name=model_name, path_or_stream=filename)\n",
					"    run.complete()"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Find best model\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"inputCollapsed": true
				},
				"source": [
					"minimum_rmse_runid = None\n",
					"minimum_rmse = None\n",
					"\n",
					"for run in experiment.get_runs():\n",
					"    run_metrics = run.get_metrics()\n",
					"    run_details = run.get_details()\n",
					"    # each logged metric becomes a key in this returned dict\n",
					"    run_rmse = run_metrics[\"rmse\"]\n",
					"    run_id = run_details[\"runId\"]\n",
					"\n",
					"    if minimum_rmse is None:\n",
					"        minimum_rmse = run_rmse\n",
					"        minimum_rmse_runid = run_id\n",
					"    else:\n",
					"        if run_rmse < minimum_rmse:\n",
					"            minimum_rmse = run_rmse\n",
					"            minimum_rmse_runid = run_id\n",
					"\n",
					"print(\"Best run_id: \" + minimum_rmse_runid)\n",
					"print(\"Best run_id rmse: \" + str(minimum_rmse))"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Store Best Run\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.core import Run\n",
					"best_run = Run(experiment=experiment, run_id=minimum_rmse_runid)\n",
					"print(best_run.get_file_names())"
				],
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Get Metrics from Best Run\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"print(best_run.get_metrics())"
				],
				"execution_count": 14
			}
		]
	}
}